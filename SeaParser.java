
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Mar 24 20:28:41 EDT 2019
//----------------------------------------------------


/** CUP v0.10k generated parser.
  * @version Sun Mar 24 20:28:41 EDT 2019
  */
public class SeaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SeaParser() {super();}

  /** Constructor which sets the default scanner. */
  public SeaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\003\004\000\002\002\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\004\004\000\002\004\002\000\002\005" +
    "\004\000\002\005\002\000\002\007\012\000\002\007\010" +
    "\000\002\010\004\000\002\010\002\000\002\011\005\000" +
    "\002\011\002\000\002\012\005\000\002\013\006\000\002" +
    "\015\004\000\002\015\002\000\002\014\007\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\020\006\000\002\016\004\000\002\016\004\000" +
    "\002\016\007\000\002\017\010\000\002\021\003\000\002" +
    "\021\003\000\002\022\005\000\002\022\007\000\002\022" +
    "\007\000\002\023\005\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\010\002\ufff3\023\ufff3\060\006\001\002\000" +
    "\004\002\124\001\002\000\006\002\ufff1\023\012\001\002" +
    "\000\010\002\ufff3\023\ufff3\060\006\001\002\000\006\002" +
    "\ufff4\023\ufff4\001\002\000\006\002\ufff1\023\012\001\002" +
    "\000\004\002\001\001\002\000\004\004\013\001\002\000" +
    "\004\035\014\001\002\000\006\004\015\036\uffed\001\002" +
    "\000\004\045\121\001\002\000\004\036\024\001\002\000" +
    "\006\036\uffeb\041\020\001\002\000\004\004\015\001\002" +
    "\000\004\036\uffee\001\002\000\006\036\uffeb\041\020\001" +
    "\002\000\004\036\uffec\001\002\000\006\033\025\045\026" +
    "\001\002\000\014\004\052\026\050\027\054\031\051\033" +
    "\025\001\002\000\030\004\037\007\041\010\042\011\035" +
    "\012\031\013\034\014\036\015\030\016\043\017\032\020" +
    "\033\001\002\000\006\002\uffef\023\uffef\001\002\000\014" +
    "\033\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000" +
    "\014\033\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002" +
    "\000\014\033\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\001" +
    "\002\000\014\033\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\001\002\000\014\033\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\001\002\000\014\033\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\001\002\000\014\033\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\001\002\000\014\033\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\001\002\000\004\033\025\001\002\000" +
    "\014\033\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\001\002" +
    "\000\014\033\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\001" +
    "\002\000\014\033\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\001\002\000\006\002\ufff0\023\ufff0\001\002\000\016\004" +
    "\uffe4\026\uffe4\027\uffe4\031\uffe4\033\uffe4\034\uffe4\001\002" +
    "\000\016\004\uffe3\026\uffe3\027\uffe3\031\uffe3\033\uffe3\034" +
    "\uffe3\001\002\000\016\004\uffe5\026\uffe5\027\uffe5\031\uffe5" +
    "\033\uffe5\034\uffe5\001\002\000\004\004\114\001\002\000" +
    "\006\004\064\006\063\001\002\000\006\035\073\037\074" +
    "\001\002\000\016\004\052\026\050\027\054\031\051\033" +
    "\025\034\uffe7\001\002\000\004\004\056\001\002\000\016" +
    "\004\uffe2\026\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2\001" +
    "\002\000\004\045\060\001\002\000\016\004\uffe0\026\uffe0" +
    "\027\uffe0\031\uffe0\033\uffe0\034\uffe0\001\002\000\030\004" +
    "\037\007\041\010\042\011\035\012\031\013\034\014\036" +
    "\015\030\016\043\017\032\020\033\001\002\000\004\037" +
    "\062\001\002\000\006\004\064\006\063\001\002\000\012" +
    "\033\uffdc\040\uffdc\052\uffdc\053\uffdc\001\002\000\012\033" +
    "\uffdb\040\uffdb\052\uffdb\053\uffdb\001\002\000\004\040\066" +
    "\001\002\000\016\004\uffdd\026\uffdd\027\uffdd\031\uffdd\033" +
    "\uffdd\034\uffdd\001\002\000\004\034\072\001\002\000\016" +
    "\004\052\026\050\027\054\031\051\033\025\034\uffe7\001" +
    "\002\000\004\034\uffe8\001\002\000\024\002\uffe9\004\uffe9" +
    "\023\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\001\002\000\004\005\077\001\002\000\006\004\064" +
    "\006\063\001\002\000\004\040\076\001\002\000\016\004" +
    "\uffe1\026\uffe1\027\uffe1\031\uffe1\033\uffe1\034\uffe1\001\002" +
    "\000\004\036\100\001\002\000\004\040\101\001\002\000" +
    "\016\004\uffe6\026\uffe6\027\uffe6\031\uffe6\033\uffe6\034\uffe6" +
    "\001\002\000\004\033\025\001\002\000\006\052\104\053" +
    "\105\001\002\000\006\004\064\006\063\001\002\000\006" +
    "\004\064\006\063\001\002\000\004\033\uffd6\001\002\000" +
    "\004\033\uffd7\001\002\000\020\004\uffda\026\uffda\027\uffda" +
    "\031\uffda\032\111\033\uffda\034\uffda\001\002\000\006\031" +
    "\051\033\025\001\002\000\016\004\uffd8\026\uffd8\027\uffd8" +
    "\031\uffd8\033\uffd8\034\uffd8\001\002\000\016\004\uffd9\026" +
    "\uffd9\027\uffd9\031\uffd9\033\uffd9\034\uffd9\001\002\000\004" +
    "\045\116\001\002\000\016\004\uffdf\026\uffdf\027\uffdf\031" +
    "\uffdf\033\uffdf\034\uffdf\001\002\000\030\004\037\007\041" +
    "\010\042\011\035\012\031\013\034\014\036\015\030\016" +
    "\043\017\032\020\033\001\002\000\006\037\062\040\120" +
    "\001\002\000\016\004\uffde\026\uffde\027\uffde\031\uffde\033" +
    "\uffde\034\uffde\001\002\000\030\004\037\007\041\010\042" +
    "\011\035\012\031\013\034\014\036\015\030\016\043\017" +
    "\032\020\033\001\002\000\006\036\uffea\041\uffea\001\002" +
    "\000\004\002\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\010\007\007\001\001\000\004\004\006" +
    "\001\001\000\002\001\001\000\006\005\122\007\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\015\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\020\001\001\000\004\012\021" +
    "\001\001\000\002\001\001\000\004\011\022\001\001\000" +
    "\002\001\001\000\004\013\026\001\001\000\014\013\046" +
    "\014\052\016\054\020\045\022\044\001\001\000\004\006" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\114\001" +
    "\001\000\006\021\102\023\101\001\001\000\002\001\001" +
    "\000\016\013\046\014\067\015\066\016\054\020\045\022" +
    "\044\001\001\000\004\017\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\060\001" +
    "\001\000\002\001\001\000\004\021\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\046\014\067\015\070" +
    "\016\054\020\045\022\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\107\001\001" +
    "\000\002\001\001\000\004\021\106\001\001\000\004\021" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\112\022\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SeaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SeaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SeaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SeaParser$actions {
  private final SeaParser parser;

  /** Constructor */
  CUP$SeaParser$actions(SeaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SeaParser$do_action(
    int                        CUP$SeaParser$act_num,
    java_cup.runtime.lr_parser CUP$SeaParser$parser,
    java.util.Stack            CUP$SeaParser$stack,
    int                        CUP$SeaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SeaParser$result;

      /* select the action based on the action number */
      switch (CUP$SeaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_expr ::= expression NEQUALITY expression 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = e + " != " + x;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(17/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bool_expr ::= expression EQUALITY expression 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = e + " == " + x;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(17/*bool_expr*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_stmt ::= IF bool_expr block ELSE if_stmt 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "if (" + b + ") " + l + "else " + i; 
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(16/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_stmt ::= IF bool_expr block ELSE block 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "if (" + b + ") " + l + "else " + o; 
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(16/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_stmt ::= IF bool_expr block 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "if (" + b + ") " + l;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(16/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = i + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= NUM 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = n + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // _var_decl ::= ID COLON type ASSIGN expression SEMICOLON 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		
				RESULT = t + " " + i + " = " + e + ";";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(13/*_var_decl*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_decl ::= MUT ID COLON type SEMICOLON 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		
				RESULT = t + " " + i + ";";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(12/*var_decl*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_decl ::= MUT _var_decl 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = v + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(12/*var_decl*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_decl ::= LET _var_decl 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "const " + v;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(12/*var_decl*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assign_stmt ::= ID ASSIGN expression SEMICOLON 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		
				RESULT = i + " = " + e + ";";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(14/*assign_stmt*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= var_decl 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = v + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= assign_stmt 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = a + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= if_stmt 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = i + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= block 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = b + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= ID LPAREN QSTRING RPAREN SEMICOLON 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		
				RESULT = i + "(" + q + ");";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _statement ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(11/*_statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _statement ::= statement _statement 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = s + "\n" + t;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(11/*_statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= BEGIN statement _statement END 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		
				RESULT = "{\n" + s + "\n" + t + "}\n";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(9/*block*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_param ::= ID COLON type 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = t + i;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(8/*decl_param*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _decl_params ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(7/*_decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // _decl_params ::= COMMA decl_param _decl_params 
            {
              String RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "," + d + p;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(7/*_decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl_params ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(6/*decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_params ::= decl_param _decl_params 
            {
              String RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = d + p;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(6/*decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= FN ID LPAREN decl_params RPAREN block 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "void " + i + "(" + d + ") " + b;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(5/*function*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= FN ID LPAREN decl_params RPAREN COLON type block 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = t + " " + i + "(" + d + ") " + b;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(5/*function*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // definitions ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(3/*definitions*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // definitions ::= function definitions 
            {
              String RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = f + d;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(3/*definitions*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // includes ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(2/*includes*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // includes ::= INCLUDE includes 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "#include" + i + n;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(2/*includes*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= F32 
            {
              String RESULT = null;
			RESULT = "float";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= F64 
            {
              String RESULT = null;
			RESULT = "double";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= U8 
            {
              String RESULT = null;
			RESULT = "uint8_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= U16 
            {
              String RESULT = null;
			RESULT = "uint16_t";
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= U32 
            {
              String RESULT = null;
			RESULT = "uint32_t";
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= U64 
            {
              String RESULT = null;
			RESULT = "uint64_t";
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= I8 
            {
              String RESULT = null;
			RESULT = "int8_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= I16 
            {
              String RESULT = null;
			RESULT = "int16_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= I32 
            {
              String RESULT = null;
			RESULT = "int32_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= I64 
            {
              String RESULT = null;
			RESULT = "int64_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
			RESULT = i + "";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		RESULT = start_val;
              CUP$SeaParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SeaParser$parser.done_parsing();
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= includes definitions 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = i + d;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

