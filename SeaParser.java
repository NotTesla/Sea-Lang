
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Mar 23 13:38:50 EDT 2019
//----------------------------------------------------


/** CUP v0.10k generated parser.
  * @version Sat Mar 23 13:38:50 EDT 2019
  */
public class SeaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SeaParser() {super();}

  /** Constructor which sets the default scanner. */
  public SeaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\003\004\000\002\002\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\004\004\000\002\004\002\000\002\005" +
    "\004\000\002\005\002\000\002\007\012\000\002\007\010" +
    "\000\002\010\004\000\002\010\002\000\002\011\005\000" +
    "\002\011\002\000\002\012\005\000\002\013\006\000\002" +
    "\015\004\000\002\015\002\000\002\014\007\000\002\014" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\010\002\ufff3\024\ufff3\061\006\001\002\000" +
    "\004\002\063\001\002\000\006\002\ufff1\024\012\001\002" +
    "\000\010\002\ufff3\024\ufff3\061\006\001\002\000\006\002" +
    "\ufff4\024\ufff4\001\002\000\006\002\ufff1\024\012\001\002" +
    "\000\004\002\001\001\002\000\004\004\013\001\002\000" +
    "\004\036\014\001\002\000\006\004\015\037\uffed\001\002" +
    "\000\004\046\060\001\002\000\004\037\024\001\002\000" +
    "\006\037\uffeb\042\020\001\002\000\004\004\015\001\002" +
    "\000\004\037\uffee\001\002\000\006\037\uffeb\042\020\001" +
    "\002\000\004\037\uffec\001\002\000\006\034\025\046\026" +
    "\001\002\000\006\004\045\034\025\001\002\000\030\004" +
    "\037\007\041\010\042\011\035\012\031\013\034\014\036" +
    "\015\030\016\043\017\032\020\033\001\002\000\006\002" +
    "\uffef\024\uffef\001\002\000\010\034\ufff8\037\ufff8\042\ufff8" +
    "\001\002\000\010\034\ufffb\037\ufffb\042\ufffb\001\002\000" +
    "\010\034\ufff6\037\ufff6\042\ufff6\001\002\000\010\034\ufff5" +
    "\037\ufff5\042\ufff5\001\002\000\010\034\ufffa\037\ufffa\042" +
    "\ufffa\001\002\000\010\034\ufffc\037\ufffc\042\ufffc\001\002" +
    "\000\010\034\ufff9\037\ufff9\042\ufff9\001\002\000\010\034" +
    "\uffff\037\uffff\042\uffff\001\002\000\004\034\025\001\002" +
    "\000\010\034\ufffe\037\ufffe\042\ufffe\001\002\000\010\034" +
    "\ufffd\037\ufffd\042\ufffd\001\002\000\010\034\ufff7\037\ufff7" +
    "\042\ufff7\001\002\000\006\002\ufff0\024\ufff0\001\002\000" +
    "\004\036\054\001\002\000\010\004\045\034\025\035\uffe7" +
    "\001\002\000\010\004\uffe5\034\uffe5\035\uffe5\001\002\000" +
    "\010\004\045\034\025\035\uffe7\001\002\000\004\035\052" +
    "\001\002\000\014\002\uffe9\004\uffe9\024\uffe9\034\uffe9\035" +
    "\uffe9\001\002\000\004\035\uffe8\001\002\000\004\005\055" +
    "\001\002\000\004\037\056\001\002\000\004\041\057\001" +
    "\002\000\010\004\uffe6\034\uffe6\035\uffe6\001\002\000\030" +
    "\004\037\007\041\010\042\011\035\012\031\013\034\014" +
    "\036\015\030\016\043\017\032\020\033\001\002\000\006" +
    "\037\uffea\042\uffea\001\002\000\004\002\ufff2\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\010\007\007\001\001\000\004\004\006" +
    "\001\001\000\002\001\001\000\006\005\061\007\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\015\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\020\001\001\000\004\012\021" +
    "\001\001\000\002\001\001\000\004\011\022\001\001\000" +
    "\002\001\001\000\004\013\026\001\001\000\006\013\046" +
    "\014\045\001\001\000\004\006\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\046\014\047" +
    "\015\050\001\001\000\002\001\001\000\010\013\046\014" +
    "\047\015\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SeaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SeaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SeaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SeaParser$actions {
  private final SeaParser parser;

  /** Constructor */
  CUP$SeaParser$actions(SeaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SeaParser$do_action(
    int                        CUP$SeaParser$act_num,
    java_cup.runtime.lr_parser CUP$SeaParser$parser,
    java.util.Stack            CUP$SeaParser$stack,
    int                        CUP$SeaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SeaParser$result;

      /* select the action based on the action number */
      switch (CUP$SeaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= block 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = b + "";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= ID LPAREN QSTRING RPAREN SEMICOLON 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		
				RESULT = i + "(" + q + ");";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _statement ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(11/*_statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _statement ::= statement _statement 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = s + "\n" + t;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(11/*_statement*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= BEGIN statement _statement END 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		
				RESULT = "{\n" + s + "\n" + t + "}\n";
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(9/*block*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_param ::= ID COLON type 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = t + i;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(8/*decl_param*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _decl_params ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(7/*_decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // _decl_params ::= COMMA decl_param _decl_params 
            {
              String RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "," + d + p;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(7/*_decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl_params ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(6/*decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_params ::= decl_param _decl_params 
            {
              String RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = d + p;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(6/*decl_params*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= FN ID LPAREN decl_params RPAREN block 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "void " + i + "(" + d + ") " + b;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(5/*function*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= FN ID LPAREN decl_params RPAREN COLON type block 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = t + " " + i + "(" + d + ") " + b;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(5/*function*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // definitions ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(3/*definitions*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // definitions ::= function definitions 
            {
              String RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = f + d;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(3/*definitions*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // includes ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$SeaParser$result = new java_cup.runtime.Symbol(2/*includes*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // includes ::= INCLUDE includes 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = "#include" + i + n;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(2/*includes*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= F32 
            {
              String RESULT = null;
			RESULT = "float";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= F64 
            {
              String RESULT = null;
			RESULT = "double";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= U8 
            {
              String RESULT = null;
			RESULT = "uint8_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= U16 
            {
              String RESULT = null;
			RESULT = "uint16_t";
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= U32 
            {
              String RESULT = null;
			RESULT = "uint32_t";
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= U64 
            {
              String RESULT = null;
			RESULT = "uint64_t";
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= I8 
            {
              String RESULT = null;
			RESULT = "int8_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= I16 
            {
              String RESULT = null;
			RESULT = "int16_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= I32 
            {
              String RESULT = null;
			RESULT = "int32_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= I64 
            {
              String RESULT = null;
			RESULT = "int64_t";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
			RESULT = i + "";	
              CUP$SeaParser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		RESULT = start_val;
              CUP$SeaParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SeaParser$parser.done_parsing();
          return CUP$SeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= includes definitions 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).value;
		
				RESULT = i + d;
			
              CUP$SeaParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SeaParser$stack.elementAt(CUP$SeaParser$top-0)).right, RESULT);
            }
          return CUP$SeaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

